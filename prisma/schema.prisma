// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// REGENERAR LA BASE
// npx prisma generate
//parece que cada vez que cambies algun modelo debes ejecutar el de arriba y luego seguir 

// npx prisma migrate reset
// npx prisma migrate dev --name migracion_inicial
// npx prisma migrate deploy
//npx prisma db push

// ESTE COMANDO CREA LOS ESUQEMAS DE MANERA REVERSA, SOLO DEBES VINCULAR LA BASE DE DATOS CON EL datasource db nada mas
// npx prisma db pull con esto prisma lee la base de datos y crea los esquemas

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum RolUsuario {
  ADMINISTRADOR
  USUARIO
}


model User {
  id            Int       @id @default(autoincrement())
  name          String?  @db.VarChar(255)
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  rol           RolUsuario @default(USUARIO)
  accounts      Account[]
  authDobleFactor Boolean @default(false)
  dobleFactorConfirmacion ConfirmacionDobleFactor?
}

model Account {
  id                 Int       @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model TokenVerificacion {
  id            Int    @id @default(autoincrement())
  token         String    @unique
  email         String
  expires       DateTime
  // createdAt     DateTime  @default(now())
  // updatedAt     DateTime  @updatedAt
  @@unique([email, token])
}

model TokenReestablecimientoPassword {
  id            Int    @id @default(autoincrement())
  token         String    @unique
  email         String
  expires       DateTime
  @@unique([email, token])
}

model TokenDobleFactor {
  id            Int    @id @default(autoincrement())
  token         String    @unique
  email         String
  expires       DateTime
  @@unique([email, token])
}

model ConfirmacionDobleFactor{
  id            Int    @id @default(autoincrement())
  usuarioId     Int
  usuario User @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  @@unique([usuarioId])
}

// model TokendeVerificacion {
//   id            String       @id @default(cuid())
//   token         String    @@unique
//   email         String
//   expires       DateTime
//   createdAt     DateTime  @default(now())
//   updatedAt     DateTime  @updatedAt
//   @@unique([email, token])
// }
// model User {
//   id            Int       @id @default(autoincrement()) @db.Integer
//   name          String?   @db.VarChar(255)
//   email         String?   @unique
//   emailVerified DateTime?
//   image         String?
//   password      String?   @db.VarChar(100)
//   accounts      Account[]
// }
