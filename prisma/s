generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id                    Int                   @id @default(autoincrement())
  nombre                String?               @db.VarChar(150)
  correo                String                @unique @db.VarChar(150)
  correoVerificado      DateTime?
  imagen                String?               @db.VarChar(255)
  contrasena            String                @db.VarChar(200)
  rol                   Rol                   @default(Usuario)
  celular               String?               @db.VarChar(16)
  autenticacionDobleFactor Boolean            @default(false)
  creadoEn              DateTime              @default(now()) @db.DateTime(3)
  actualizadoEn         DateTime              @updatedAt @db.DateTime(3)
  mascotas              Mascota[]
  pagos                 Pago[]
  confirmacionDobleFactor ConfirmacionDobleFactor?
  autenticadores        Autenticador[]
  cuentas               Cuenta[]
}

model Cuenta {
  id                    Int                   @id @default(autoincrement())
  usuarioId             Int
  tipo                  String                @db.VarChar(20)
  proveedor             String                @db.VarChar(50)
  idCuentaProveedor     String                @db.VarChar(100)
  tokenActualizacion    String?               @db.Text
  tokenAcceso           String?               @db.Text
  expiraEn              Int?
  tipoToken             String?               @db.VarChar(50)
  alcance               String?               @db.VarChar(255)
  idToken               String?               @db.Text
  estadoSesion          String?               @db.VarChar(100)
  tokenActualizacionExpiraEn Int?
  creadoEn              DateTime              @default(now()) @db.DateTime(3)
  actualizadoEn         DateTime              @updatedAt @db.DateTime(3)
  usuario               Usuario               @relation(fields: [usuarioId], references: [id])
}

model TokenVerificacion {
  id                    Int                   @id @default(autoincrement())
  token                 String                @unique @db.VarChar(191)
  email                 String                @db.VarChar(191)
  expires               DateTime              @db.DateTime(3)
}

model TokenReestablecimientoPassword {
  id                    Int                   @id @default(autoincrement())
  token                 String                @unique @db.VarChar(191)
  email                 String                @db.VarChar(191)
  expires               DateTime              @db.DateTime(3)
}

model TokenDobleFactor {
  id                    Int                   @id @default(autoincrement())
  token                 String                @unique @db.VarChar(191)
  email                 String                @db.VarChar(191)
  expires               DateTime              @db.DateTime(3)
}

model ConfirmacionDobleFactor {
  id                    Int                   @id @default(autoincrement())
  usuarioId             Int                   @unique
  usuario               Usuario               @relation(fields: [usuarioId], references: [id])
}

model Autenticador {
  idCredencial          String                @id @db.VarChar(255)
  usuarioId             Int
  idCuentaProveedor     String                @db.VarChar(100)
  clavePublicaCredencial String               @db.VarChar(255)
  contador              Int
  tipoDispositivoCredencial String            @db.VarChar(50)
  respaldadoCredencial  Boolean
  transportes           String?               @db.VarChar(100)
  usuario               Usuario               @relation(fields: [usuarioId], references: [id])
}

model Mascota {
  id                    Int                   @id @default(autoincrement())
  nombre                String                @db.VarChar(100)
  especie               String                @db.VarChar(50)
  raza                  String                @db.VarChar(50)
  edad                  Int
  peso                  Float
  usuarioId             Int?
  creadoEn              DateTime              @default(now()) @db.DateTime(3)
  actualizadoEn         DateTime              @updatedAt @db.DateTime(3)
  usuario               Usuario?              @relation(fields: [usuarioId], references: [id])
  historial             HistorialMedico?
  reservasMedicas       ReservaMedica[]
}

model HistorialMedico {
  id                    Int                   @id @default(autoincrement())
  mascotaId             Int                   @unique
  creadoEn              DateTime              @default(now()) @db.DateTime(3)
  actualizadoEn         DateTime              @updatedAt @db.DateTime(3)
  mascota               Mascota               @relation(fields: [mascotaId], references: [id])
  tratamientos          TratamientoHistorial[]
}

model Tratamiento {
  id                    Int                   @id @default(autoincrement())
  nombre                String                @db.VarChar(100)
  descripcion           String?               @db.Text
  precio                Float
  creadoEn              DateTime              @default(now()) @db.DateTime(3)
  actualizadoEn         DateTime              @updatedAt @db.DateTime(3)
  tratamientosHistorial TratamientoHistorial[]
  medicamentos          TratamientoMedicamento[]
}

model Medicamento {
  id                    Int                   @id @default(autoincrement())
  nombre                String                @db.VarChar(100)
  descripcion           String?               @db.Text
  stock                 Int
  precio                Float
  creadoEn              DateTime              @default(now()) @db.DateTime(3)
  actualizadoEn         DateTime              @updatedAt @db.DateTime(3)
  tratamientos          TratamientoMedicamento[]
}

model TratamientoHistorial {
  id                    Int                   @id @default(autoincrement())
  tratamientoId         Int
  historialMedicoId     Int
  cantidad              Int
  precioTotal           Float
  creadoEn              DateTime              @default(now()) @db.DateTime(3)
  actualizadoEn         DateTime              @updatedAt @db.DateTime(3)
  tratamiento           Tratamiento           @relation(fields: [tratamientoId], references: [id])
  historialMedico       HistorialMedico       @relation(fields: [historialMedicoId], references: [id])
}

model TratamientoMedicamento {
  id                    Int                   @id @default(autoincrement())
  tratamientoId         Int
  medicamentoId         Int
  cantidad              Int
  creadoEn              DateTime              @default(now()) @db.DateTime(3)
  actualizadoEn         DateTime              @updatedAt @db.DateTime(3)
  tratamiento           Tratamiento           @relation(fields: [tratamientoId], references: [id])
  medicamento           Medicamento           @relation(fields: [medicamentoId], references: [id])
}

model Pago {
  id                    Int                   @id @default(autoincrement())
  usuarioId             Int
  total                 Float
  cuotas                Int
  montoCuota            Float
  estado                EstadoPago            @default(Pendiente)
  creadoEn              DateTime              @default(now()) @db.DateTime(3)
  actualizadoEn         DateTime              @updatedAt @db.DateTime(3)
  usuario               Usuario               @relation(fields: [usuarioId], references: [id])
}

model ReservaMedica {
  id                    Int                   @id @default(autoincrement())
  usuarioId             Int?
  mascotaId             Int
  servicio              String                @db.VarChar(100)
  fecha                 DateTime
  estado                EstadoReserva         @default(Pendiente)
  creadoEn              DateTime              @default(now()) @db.DateTime(3)
  actualizadoEn         DateTime              @updatedAt @db.DateTime(3)
  usuario               Usuario?              @relation(fields: [usuarioId], references: [id])
  mascota               Mascota               @relation(fields: [mascotaId], references: [id])
}

enum Rol {
  Administrador
  Usuario
}

enum EstadoPago {
  Pendiente
  Pagado
}

enum EstadoReserva {
  Pendiente
  Confirmada
  Cancelada
}
